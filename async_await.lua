--Функция async создаёт асинхронный контекст, в котором можно использовать await.
--await приостанавливает выполнение асинхронной функции, пока операция не завершится.

--Обычно используется корутины (сопрограммы). Упрощённый пример:

function fake_async(fn)
    local co = coroutine.create(fn)
    coroutine.resume(co) -- Запускает асинхронное выполнение
end

function fake_await(task)
    while not task:isDone() do
        coroutine.yield() -- "Приостанавливает" выполнение
    end
    return task:result()
end

--async добавляет функцию в очередь задач.
--await ставит задачу на паузу до готовности результата.
--Другие задачи выполняются, пока ждём.

--Таймер setInterval срабатывает каждую секунду.
--Каждый вызов запускает асинхронную задачу (async).
--await гарантирует, что код ниже выполнится только после чтения тега.
--Если tagApi.readMany занимает 300 мс — другие таймеры/задачи не блокируются.

--Нельзя использовать await вне async

--async создаёт фоновую задачу.
--await приостанавливает её, пока tagApi.readMany не ответит.
--setInterval продолжает вызываться каждую секунду, даже если предыдущий вызов ещё ждёт ответа.